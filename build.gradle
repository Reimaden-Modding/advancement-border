plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        url 'https://maven.nucleoid.xyz'
    }
    maven {
        name 'Configuration'
        url 'https://api.repsy.io/mvn/toma/public/'
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // https://github.com/NucleoidMC/Server-Translations
    modImplementation include("xyz.nucleoid:server-translations-api:${project.server_translations_version}")
    // https://github.com/Toma1O6/Configuration
    modImplementation "dev.toma.configuration:configuration-${project.minecraft_version}:${project.configuration_version}-fabric"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

static def addMinecraftVersions(versionsContainer) {
    versionsContainer.add("1.21.2")
    versionsContainer.add("1.21.3")
    versionsContainer.add("1.21.4")
}

publishMods {
    changelog = providers.fileContents(layout.projectDirectory.file("CHANGELOG.md")).asText
            .map { fullChangelog ->
                def currentVersion = project.mod_version.toString()
                def versionPattern = /###\s($currentVersion)[\s\S]*?(?=###|\Z)/
                def matcher = (fullChangelog =~ versionPattern)
                if (matcher.find()) {
                    return matcher.group(0).replaceFirst("^###\\s" + currentVersion + "\\s*", "").trim()
                } else {
                    return "No changelog available"
                }
            }
    type = STABLE
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    modLoaders.add("fabric")
    version = project.version
    displayName = "Advancement Border " + project.mod_version
    // dryRun = true

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "5CeMwTPT"
        addMinecraftVersions(minecraftVersions)
        projectDescription = providers.fileContents(layout.projectDirectory.file("README.md")).asText

        requires {
            // Fabric API
            id = "P7dR8mSH"
        }
        requires {
            // Configuration
            id = "3WjjSM5O"
        }
        optional {
            // Mod Menu
            id = "mOgUt4GM"
        }
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "1134292"
        addMinecraftVersions(minecraftVersions)
        clientRequired = false
        serverRequired = true

        requires("fabric-api", "configuration")
        optional("modmenu")
    }
}